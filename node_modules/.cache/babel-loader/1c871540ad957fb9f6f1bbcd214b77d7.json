{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stale\\\\Documents\\\\GitHub\\\\1st React App 2\\\\src\\\\components\\\\AddExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// import \"./ExpenseForm.css\";\n// import { useState } from 'react';\n// const ExpenseForm = (props) => {\n//     const [newName, changeName] = useState('');\n//     const [newPrice, modPrice] = useState('');\n//     const [newDate, alterDate] = useState('');\n//     //these functs are handlers that get passed the onChange event and fire the stateFunct\n//     const nameChangeHandler = (event) => {\n//         //state funct grabs user input and loads the new State in the state variable\n//         changeName(event.target.value);\n//     };\n//     const priceHandler = (event) => {\n//         modPrice(event.target.value)\n//     };\n//     const dateHandler = (event) => {\n//         alterDate(event.target.value);\n//     }\n//     const subHandler = (event) =>{\n//       event.preventDefault();\n//       //store state vars, after handler from either price, date, or title fires, in obj\n//       const formData = {\n//         title: newName,\n//         amount: newPrice,\n//         date: new Date(newDate)\n//       };\n//       //passing data up through props, going to ExpenseItem\n//       props.onSaveExpense(formData);\n//       //clears form\n//       changeName('');\n//       modPrice('');\n//       alterDate('');\n//     };\n//   const landingHandler = () =>{\n//     let addState = 2; \n//    {addState % 2 === 0 && <form onSubmit={subHandler}>\n//    <div className=\"new-expense__controls\">\n//      <div className=\"new-expense__control\">\n//        <label>Title</label>\n//        <input type=\"text\" value={newName} onChange={nameChangeHandler} />\n//      </div>\n//      <div className=\"new-expense__control\">\n//        <label>Amount</label>\n//        <input type=\"number\" value={newPrice} min=\"0.00\" step=\"0.50\" onChange={priceHandler} />\n//      </div>\n//      <label>Date</label>\n//      <input type=\"date\" value={newDate} min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateHandler} />\n//    </div>\n//    <div className=\"new-expense__actions\">\n//      <button type=\"submit\">Add Expense</button>\n//    </div>\n//   </form>\n//   {addState + 1}\n// }  \n// //attempted to make a counter, handlers, jsx to conditionally show data per Max's assignment. Proceeding w solution.\n// { addState % 2 != 0 && \n//   <div className=\"expense_landing\">\n//     <button className=\"expense_button\" onClick={landingHandler}>Add Expense</button>\n//   </div>\n//   {addState + 1}\n//  }\n// };\n// }\n// export default ExpenseForm;\nimport React, { useState } from 'react';\nimport ExpenseForm from './ExpenseForm';\nimport './NewExpense.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewExpense = props => {\n  _s();\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  const saveExpenseDataHandler = enteredExpenseData => {\n    const expenseData = { ...enteredExpenseData,\n      id: Math.random().toString()\n    };\n    props.onAddExpense(expenseData);\n    setIsEditing(false);\n  };\n\n  const startEditingHandler = () => {\n    setIsEditing(true);\n  };\n\n  const stopEditingHandler = () => {\n    setIsEditing(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense\",\n    children: [!isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startEditingHandler,\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveExpenseData: saveExpenseDataHandler,\n      onCancel: stopEditingHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewExpense, \"N4qUVpaen/rROL8jPu/4huFD8lA=\");\n\n_c = NewExpense;\nexport default NewExpense;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewExpense\");","map":{"version":3,"names":["React","useState","ExpenseForm","NewExpense","props","isEditing","setIsEditing","saveExpenseDataHandler","enteredExpenseData","expenseData","id","Math","random","toString","onAddExpense","startEditingHandler","stopEditingHandler"],"sources":["C:/Users/stale/Documents/GitHub/1st React App 2/src/components/AddExpense/ExpenseForm.js"],"sourcesContent":["// import React from \"react\";\r\n// import \"./ExpenseForm.css\";\r\n// import { useState } from 'react';\r\n\r\n// const ExpenseForm = (props) => {\r\n//     const [newName, changeName] = useState('');\r\n//     const [newPrice, modPrice] = useState('');\r\n//     const [newDate, alterDate] = useState('');\r\n\r\n\r\n//     //these functs are handlers that get passed the onChange event and fire the stateFunct\r\n//     const nameChangeHandler = (event) => {\r\n//         //state funct grabs user input and loads the new State in the state variable\r\n//         changeName(event.target.value);\r\n//     };\r\n//     const priceHandler = (event) => {\r\n//         modPrice(event.target.value)\r\n//     };\r\n\r\n//     const dateHandler = (event) => {\r\n//         alterDate(event.target.value);\r\n//     }\r\n\r\n//     const subHandler = (event) =>{\r\n//       event.preventDefault();\r\n      \r\n//       //store state vars, after handler from either price, date, or title fires, in obj\r\n//       const formData = {\r\n//         title: newName,\r\n//         amount: newPrice,\r\n//         date: new Date(newDate)\r\n//       };\r\n\r\n//       //passing data up through props, going to ExpenseItem\r\n//       props.onSaveExpense(formData);\r\n    \r\n//       //clears form\r\n//       changeName('');\r\n//       modPrice('');\r\n//       alterDate('');\r\n//     };\r\n\r\n//   const landingHandler = () =>{\r\n//     let addState = 2; \r\n//    {addState % 2 === 0 && <form onSubmit={subHandler}>\r\n//    <div className=\"new-expense__controls\">\r\n//      <div className=\"new-expense__control\">\r\n//        <label>Title</label>\r\n//        <input type=\"text\" value={newName} onChange={nameChangeHandler} />\r\n//      </div>\r\n//      <div className=\"new-expense__control\">\r\n//        <label>Amount</label>\r\n//        <input type=\"number\" value={newPrice} min=\"0.00\" step=\"0.50\" onChange={priceHandler} />\r\n//      </div>\r\n//      <label>Date</label>\r\n//      <input type=\"date\" value={newDate} min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateHandler} />\r\n//    </div>\r\n//    <div className=\"new-expense__actions\">\r\n//      <button type=\"submit\">Add Expense</button>\r\n//    </div>\r\n//   </form>\r\n//   {addState + 1}\r\n// }  \r\n// //attempted to make a counter, handlers, jsx to conditionally show data per Max's assignment. Proceeding w solution.\r\n// { addState % 2 != 0 && \r\n//   <div className=\"expense_landing\">\r\n//     <button className=\"expense_button\" onClick={landingHandler}>Add Expense</button>\r\n//   </div>\r\n//   {addState + 1}\r\n//  }\r\n\r\n// };\r\n// }\r\n\r\n// export default ExpenseForm;\r\nimport React, { useState } from 'react';\r\n\r\nimport ExpenseForm from './ExpenseForm';\r\nimport './NewExpense.css';\r\n\r\nconst NewExpense = (props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const startEditingHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const stopEditingHandler = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div className='new-expense'>\r\n      {!isEditing && (\r\n        <button onClick={startEditingHandler}>Add New Expense</button>\r\n      )}\r\n      {isEditing && (\r\n        <ExpenseForm\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n          onCancel={stopEditingHandler}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,kBAAP;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;EAAA;;EAC5B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;;EAEA,MAAMM,sBAAsB,GAAIC,kBAAD,IAAwB;IACrD,MAAMC,WAAW,GAAG,EAClB,GAAGD,kBADe;MAElBE,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd;IAFc,CAApB;IAIAT,KAAK,CAACU,YAAN,CAAmBL,WAAnB;IACAH,YAAY,CAAC,KAAD,CAAZ;EACD,CAPD;;EASA,MAAMS,mBAAmB,GAAG,MAAM;IAChCT,YAAY,CAAC,IAAD,CAAZ;EACD,CAFD;;EAIA,MAAMU,kBAAkB,GAAG,MAAM;IAC/BV,YAAY,CAAC,KAAD,CAAZ;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,aAAf;IAAA,WACG,CAACD,SAAD,iBACC;MAAQ,OAAO,EAAEU,mBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,EAIGV,SAAS,iBACR,QAAC,WAAD;MACE,iBAAiB,EAAEE,sBADrB;MAEE,QAAQ,EAAES;IAFZ;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CAjCD;;GAAMb,U;;KAAAA,U;AAmCN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}